<#
    .DESCRIPTION
        Finds all VMs with backup tags and starts sub-tasks for RGs with
        valid VMs in them.

        Webhook-run
        Schedule-run, weekly

    .NOTES
        Version: 1.0
        AUTHOR: Alex Imray Papineau
        LAST EDIT: 23 January 2020
        EDITOR: Alex Imray Papineau
#>

Param(
    # Webhook-triggered
    [Parameter(Mandatory = $false)]
    [object] $WebhookData = $null,
    # Schedule-triggered
    [Parameter(Mandatory = $false, HelpMessage = `
        "The resource group in which to apply the operation")]
    [string] $ResourceGroup = ""
)

# Prevents runbook from continuing execution if there's an error - Alex
$ErrorActionPreference = "Stop"

# Logging in -> Get connection and use for Az login
$Connection = Get-AutomationConnection -Name "AzureRunAsConnection"
$AzureProfile = Connect-AzAccount `
    -Tenant $Connection.TenantId `
    -CertificateThumbprint $Connection.CertificateThumbprint `
    -ApplicationId $Connection.ApplicationId `
    -ServicePrincipal
$AzureProfile.Context.Subscription

# Parse webhook data
if ($null -ne $WebhookData)
{
    try
    {
        $Webhook = $WebhookData
        "Display request body:`n{0}" -f $Webhook.RequestBody.ToString()
        Get-Member -InputObject $Webhook -Name "RequestBody" -MemberType Property
    }
    catch
    {
        "Cannot access request body. Converting webhook from JSON..."
        $Webhook = $WebhookData | ConvertFrom-Json
    }

    try
    {
        $RequestBody = $Webhook.RequestBody
        "Display subject:`n{0}" -f $RequestBody.subject.ToString()
        Get-Member -InputObject $RequestBody -Name "subject" -MemberType Property
    }
    catch
    {
        "Cannot access subject. Converting request body from JSON..."
        $RequestBody = $Webhook.RequestBody | ConvertFrom-Json
    }

    $SubStrings = $RequestBody.subject.Split('/')
    if ($SubStrings.Length -le 0)
    {
        "No substrings found in 'Webhook.RequestBody.subject'. Exiting."
        exit
    }
    else
    {
        $Message = "Data substrings parsed:"
        foreach($Sub in $SubStrings)
        { $Message += "`n- " + $Sub }
        $Message += "`n"
    }

    $ResourceGroup = $SubStrings[4]
    $VaultName = $SubStrings[8]

    "Webhook run.`nResource Group: {0}`nVault: {1}" `
        -f $ResourceGroup, $VaultName
}
else
{
    "Scheduled run.`nResource Group: {0}" `
        -f $ResourceGroup
}

$backupVMs = @()
if ($ResourceGroup -eq "")
{
    $backupVMs += @(Get-AzResource `
        -ResourceType "Microsoft.Compute/virtualMachines" `
        -TagName "Backup")
}
else
{
    $backupVMs += @(Get-AzResource `
        -ResourceGroupName $resourceGroup `
        -ResourceType "Microsoft.Compute/virtualMachines" `
        -TagName "Backup")
}

if ($backupVMs.Count -le 0)
{
    "Retrieved no VMs with backup tags. Exiting."
    exit
}
else
{ "Retrieved {0} VMs with backup tags. Parsing RGs..." -f $backupVMs.Count }

# Retrieve necessary automation variables
$AutoAccountName = Get-AutomationVariable -Name 'AutoAccountName'
$AutoAccountRG = Get-AutomationVariable -Name 'AutoAccountRG'
"Retrieved automation variables:`nAutomation account name: {0}`nAutomation account RG: {1}" `
-f $AutoAccountName, $AutoAccountRG

# Start backup linking 
$backupRGs = @()
foreach ($vm in $backupVMs)
{
    # if ($vm.Tags.Backup -eq 'None')
    # { continue }

    if ($backupRGs -inotcontains $vm.ResourceGroupName)
    {
        $backupRGs += $vm.ResourceGroupName
        $args = @{ "ResourceGroupName" = $vm.ResourceGroupName }

        try {
            Start-AzAutomationRunbook `
                -AutomationAccountName $AutoAccountName `
                -Name 'Init-Backups' -ResourceGroupName $AutoAccountRG `
                -Parameters $args `
                | Out-Null
            "Initializing backups for VMs in RG '{0}'." `
                -f $vm.ResourceGroupName
        }
        catch {
            "Failed to start initializing backups in RG '{0}':`n{1}" `
                -f $vm.ResourceGroupName, $Error
        }
    }
}