# This is the integration script running under DMP Azure Automation service runbook
# There are three integration points:
# 1. MS Teams channel integration (Note: not related to this Notification API) using Azure Event Grid
# 2. Notification Email API integration
# 3. Notification SMS API integration

Param
(
    [parameter (Mandatory=$false)]
    [object] $WebhookData,
    [parameter (Mandatory=$false)]
    $ChannelURL
)
# If runbook was called from Webhook, WebhookData will not be null.
if ($WebhookData) {
    Write-Output "RAW WEBHOOK DATA"
    $WebhookData | Format-List *
    # Parsing the RequestBody from the WebhookData.
    $webhookBodyObject = ConvertFrom-Json -InputObject $WebhookData.RequestBody
    $url = $webhookBodyObject.data.url
    $artifactId = $url.split("/")[-1]
    $uploadTime = $webhookBodyObject.eventTime
    $formatedUploadTime = get-date -Format "dddd MM/dd/yyyy HH:mm K" -Date $uploadTime
    $file = $webhookBodyObject.subject
    $baseUrl = Get-AutomationVariable -Name 'ProdstoreBaseUrl'
    $fileDownloadUri = $baseUrl + "files/" + $artifactId
    $fileMappableUri = $baseUrl + "artifact/isMappable/" + $artifactId
    $mappable = Invoke-RestMethod -Uri $fileMappableUri -Method "Get"
    if ($mappable.ToString() -eq "False") {
        write-Output "The file is not mappable, skip."
        return;
    }
    $fileNameUri = $baseUrl + "artifact/filename/" + $artifactId
    $fileName = Invoke-RestMethod -Uri $fileNameUri -Method "Get"
    #Post to MS Teams if the channel webhook is present.
    if (! ([string]::IsNullOrEmpty($ChannelURL)))
    {
        $Body = ConvertTo-Json -Depth 4 @{
            title = 'TADAP Geospatial Data Upload Notification'
            text = 'A new geospatial data file is available for ingestion'
            sections = @(
            @{
                activityTitle = 'TATAP Prod Store New File Upload Notification'
                activitySubtitle = "A new mappable file named $fileName has been uploaded"
                activityText = "ALERT: On $formatedUploadTime, the file is ready for process."
                activityImage = ""
            }
            )
            potentialAction = @(@{
                '@context' = 'http://schema.org'
                '@type' = 'ViewAction'
                name = 'Click here to download the file'
                target = @($fileDownloadUri)
            })
        }

        # call Teams webhook
        Write-Output $Body
        Invoke-RestMethod -Method "Post" -Uri $ChannelURL -Body $Body | Write-Verbose
    }
    #Write-Output $webhookBodyObject
    $personlisation = @{
        receiver='GIS DevOps'
        file_name= $fileName
        download_link = $fileDownloadUri
        uploaded_time = $formatedUploadTime
        reference_number = $artifactId
    }
    $notif_payload = $personlisation | ConvertTo-Json

    # Send notification email using the GC notification service
    $notif_base_url = Get-AutomationVariable -Name 'NotificationBaseUrl'
    $notif_email = Get-AutomationVariable -Name 'NotificationEmail'
    $notif_email_url = $notif_base_url + "email?email=$notif_email"
    Invoke-RestMethod $notif_email_url -Method Post -Body $notif_payload -ContentType 'application/json'

    # Send notification sms using the GC notification service, must be a valid phone number with format of xxx-xxx-xxxx
    $notif_phone = Get-AutomationVariable -Name 'NotificationPhone'
    $notif_sms_url = $notif_base_url + "sms?phone=$notif_phone"
    Invoke-RestMethod $notif_sms_url -Method Post -Body $notif_payload -ContentType 'application/json'

}
else {
    # Error
    write-Error "No webhook data found."
}
