<#    
.DESCRIPTION
    Automation runbook integrates with Azure event grid subscriptions to 
    add CustomScript Extension to windows and linux vms to run bootstrap.ps1/bootstrap.sh

.PARAMETER WebhookData
    Optional. The information about the write event that is sent to this runbook from Azure Event grid.
  
.NOTES
    AUTHOR: Kevin Dutton
    LASTEDIT: Feb 19th, 2020
    webhook: https://s10events.azure-automation.net/webhooks?token=sHHZ5Hg2Kb4sTeOMAQr5KMTrvHgaKpuPbJ18OB9tc%2fY%3d
    expires: Feb 19th, 2021
#>
 
Param(
    [parameter (Mandatory=$false)]
    [object] $WebhookData
);

# Prevents runbook from continuing execution if there's an error - Alex
$ErrorActionPreference = "Stop"

if (!$WebhookData.RequestBody)
{
    #If run from test pane, WebhookData is not converted to json by default.
    $WebhookData = $WebhookData | ConvertFrom-Json;
}

$RequestBody = $WebhookData.RequestBody | ConvertFrom-Json;

$data = $RequestBody.data;

# Prase data for resource group and vm name
$resources = $data.resourceUri.Split('/')
$vmResourceGroup = $resources[4]
$vmName = $resources[8]

if ($data.operationName -match "Microsoft.Compute/virtualMachines/write" -And $data.status -match "Succeeded" -And !($vmResourceGroup -like "MC_*") -And !($vmResourceGroup -like "AKS*"))
{
    # Authenticate to Azure
    $Connection = Get-AutomationConnection -Name "AzureRunAsConnection"
    $AzureProfile = Connect-AzAccount `
        -Tenant $Connection.TenantId `
        -CertificateThumbprint $Connection.CertificateThumbprint `
        -ApplicationId $Connection.ApplicationId `
        -ServicePrincipal

    $AzureProfile.Context.Subscription

    #Set enviroment varibales based on which subscription the script is running under.
    switch ($AzureProfile.Context.Subscription)
    {
        #Cloud Team Sandbox 9b3162d1-21e8-4347-b89b-e18876a28cbd
        9b3162d1-21e8-4347-b89b-e18876a28cbd
        {
            $Domain = 'cloud-dfo-mpo';
            $FullDomainName = 'cloud-dfo-mpo.ca';
            $RoleDefinitionNames = @('DFO VM OPERATOR', 'Virtual Machine Administrator Login');
            $myCredential = Get-AutomationPSCredential -Name 'domainCredentials';
            $ScriptLocation = 'https://cloudmgmtprod.blob.core.windows.net/scripts';
            $WorkspaceName = "MGMT-SND-LOG";
            $WorkspaceRG = "common-rg";
        }
        #IMTS DEV/TEST 3eb57d27-b726-402d-8cfe-a9a846b99121
        3eb57d27-b726-402d-8cfe-a9a846b99121
        {
            $Domain = 'cloud-dfo-mpo';
            $FullDomainName = 'cloud-dfo-mpo.ca';
            $RoleDefinitionNames = @('DFO-General-DEVELOPER', 'DFO VM OPERATOR', 'Virtual Machine Administrator Login');
            $myCredential = Get-AutomationPSCredential -Name 'domainCredentials';
            $ScriptLocation = 'https://cloudmgmtprod.blob.core.windows.net/scripts';
        }
        #IMTS PROD a09b97a0-4b61-469d-ab88-1f77727b8c08
        a09b97a0-4b61-469d-ab88-1f77727b8c08
        {
            $Domain = 'cloud-dfo-mpo';
            $FullDomainName = 'cloud-dfo-mpo.ca';
            $RoleDefinitionNames = @('DFO VM OPERATOR', 'Virtual Machine Administrator Login');
            $myCredential = Get-AutomationPSCredential -Name 'domainCredentials';
            $ScriptLocation = 'https://cloudmgmtprod.blob.core.windows.net/scripts';
            $WorkspaceName = "mgmt-prod-logs";
            $WorkspaceRG = "mgmt-prod-rg";
        }
    }
    
    $vm = Get-AzVM -ResourceGroupName $vmResourceGroup -Name $vmName;
    $vmStatuses = $vm | Get-AzVM -Status

    Write-Output "Operation: $($data.operationName); Status:  $($data.status); ResourceGroup: $($vm.ResourceGroupName); Virtual Machine: $($vm.Name);"

    if (($vmStatuses.Statuses | Where-Object { $_.Code -Like 'PowerState/*' })[0].DisplayStatus -like "*running*")
    {
        #if windows, install azure extensions.
        If($vm.StorageProfile.OsDisk.OsType -eq "Windows")
        {
            if(!($vm.Extensions | Where-Object { $_.Name -like "Bootstrap" -And $_.ProvisioningState -eq "Succeeded" }))
            {
                try
                {
                    Write-Output "Install Bootstrap for $($vm.Name)."

                    #Get groups from specified roles.
                    $groups = @("$Domain\Azure - Admin");

                    Write-Output "Retreiving groups from role assignments...";

                    Foreach($RoleDefinitionName in $RoleDefinitionNames)
                    {
                        $roles = Get-AzRoleAssignment -ResourceGroupName $vm.ResourceGroupName -RoleDefinitionName $RoleDefinitionName | Where-Object { $_.ObjectType -eq 'Group' };
                        
                        Foreach ($obj in $roles)
                        {
                            $groups += "$Domain\$($obj.DisplayName)";
                        }
                    }
                    $groups = $groups -join ";";

                    Write-Output "Done.";

                    $userName = $myCredential.UserName;
                    $password = $myCredential.GetNetworkCredential().Password;

                    Write-Output "Installing extension...";

                    $fileUri = @("$ScriptLocation/bootstrap.ps1",
                        "$ScriptLocation/ConfigureWinRM.ps1",
                        "$ScriptLocation/winrmconf.cmd",
                        "$ScriptLocation/makecert.exe"
                    );

                    $Settings = @{"fileUris" = $fileUri};

                    $ProtectedSettings = @{"commandToExecute" = "powershell -ExecutionPolicy Unrestricted -File bootstrap.ps1 -VmName $vmName -Groups ""$groups"" -DomainName $FullDomainName -Username $userName -Password $password"};

                    Set-AzVMExtension -Name "Bootstrap" `
                        -ResourceGroupName $vm.ResourceGroupName `
                        -VMName $vm.Name `
                        -Location $vm.Location `
                        -Publisher "Microsoft.Compute" `
                        -ExtensionType "CustomScriptExtension" `
                        -TypeHandlerVersion "1.9" `
                        -Settings $Settings `
                        -ProtectedSettings $ProtectedSettings

                    Write-Output "Done.";
                }
                catch
                {
                    Write-Error -Message $_.Exception;
                    throw $_.Exception;
                }
            }

            if(!($vm.Extensions | Where-Object { $_.Name -like "MicrosoftMonitoringAgent" -And $_.ProvisioningState -eq "Succeeded" }))
            {
                $workspace = Get-AzOperationalInsightsWorkspace -Name $WorkspaceName -ResourceGroupName $WorkspaceRG -ErrorAction Stop
                $key = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $WorkspaceRG -Name $WorkspaceName).PrimarySharedKey

                $PublicSettings = @{"workspaceId" = $workspace.CustomerId }
                $ProtectedSettings = @{"workspaceKey" = $key }

                Write-Output "Adding MicrosoftMonitoringAgent extension to VM: $($vm.Name)"
				Set-AzVMExtension -Name "MicrosoftMonitoringAgent" `
                	-ResourceGroupName $vm.ResourceGroupName `
                	-VMName $vm.Name `
                	-Publisher "Microsoft.EnterpriseCloud.Monitoring" `
                	-ExtensionType "MicrosoftMonitoringAgent" `
                	-TypeHandlerVersion 1.0 `
                	-Settings $PublicSettings `
                	-ProtectedSettings $ProtectedSettings `
                	-Location $vm.Location
            }
        }
        else
        {
            #Linux VM
            if(!($vm.StorageProfile.ImageReference.Publisher -like "fortinet"))
            {
                if(!($vm.Extensions | Where-Object { $_.Name -like "Bootstrap" }))
                {
                    Write-Output "Install Bootstrap"
                    if(!($vm.Extensions | Where-Object { $_.Name -like "VMAccessForLinux" }))
                    {
                        #Reset SSH login.
                        Write-Output "Reset ssh login for linuxadm $($vm.Name)."

                        $PrivateConf = @{ "username" = "linuxadm"; "ssh_key" = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChGbf/MZQaEc5Id3gVUYp7w+fT/g/aq6RUbtSPugTH1smwPBOUxRQjREiMl1vud7ylPDED/uENYdOqCms5K8eapGjWKhJaXZi99O7pfg1G//h9RyL4UhVnGgMiwZARac88pXI0UTV3GHFYn4gbam7B44q4mwWn/T13G8SvvfinefmnmwUZszsu/gf0r+lZHc1luBcWrgomYaMV/PR6OYGYv4RXSk3u+51eqoeZCfYuEd/jTJCgIivwNLhQR/lvGEYr7Uw4KSeCOwItnMRAsTO2GUeq13mH267L5LzJQB3W3/mj8n8J3KPl30Tii3PVoJVAOlfpZOuaknbsuWB7/5fR"; "reset_ssh" = "false" }

                        Set-AzVMExtension -Name 'VMAccessForLinux' `
                            -ResourceGroupName $vm.ResourceGroupName `
                            -Location $vm.Location `
                            -VMName $vm.Name `
                            -Publisher 'Microsoft.OSTCExtensions' `
                            -Type 'VMAccessForLinux' `
                            -Version '1.5' `
                            -ProtectedSettings $PrivateConf `
                            -AsJob
                    }

                    $fileUri = @("$ScriptLocation/bootstrap.py",
                        "$ScriptLocation/rootca.crt"
                    );

                    $Settings = @{"fileUris" = $fileUri};

                    $ProtectedSettings = @{"commandToExecute" = "python bootstrap.py"};

                    Set-AzVMExtension -Name "Bootstrap" `
                        -ResourceGroupName $vm.ResourceGroupName `
                        -VMName $vm.Name `
                        -Location $vm.Location  `
                        -Publisher "Microsoft.Azure.Extensions" `
                        -ExtensionType "CustomScript" `
                        -TypeHandlerVersion "2.0" `
                        -Settings $Settings `
                        -ProtectedSettings $ProtectedSettings `
                        -AsJob
                }

                if(!($vm.Extensions | Where-Object { $_.Name -like "OmsAgentForLinux" }))
                {
                    Write-Output "Adding OmsAgentForLinux extension to VM: $($vm.Name)"

                    $workspace = Get-AzOperationalInsightsWorkspace -Name $WorkspaceName -ResourceGroupName $WorkspaceRG -ErrorAction Stop
                    $key = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $WorkspaceRG -Name $WorkspaceName).PrimarySharedKey

                    Write-Output $workspace.CustomerId
                    Write-Output $key

                    $PublicSettings = @{"workspaceId" = $workspace.CustomerId }
                    $ProtectedSettings = @{"workspaceKey" = $key }

				    Set-AzVMExtension -Name "OMSExtension" `
                        -ResourceGroupName $vm.ResourceGroupName `
                        -VMName $vm.Name `
                        -Location $vm.Location `
                        -Publisher "Microsoft.EnterpriseCloud.Monitoring" `
                        -ExtensionType "OmsAgentForLinux" `
                        -TypeHandlerVersion 1.7 `
                        -Settings $PublicSettings `
                        -ProtectedSettings $ProtectedSettings `
                        -AsJob
                }
            }
        }
    }
}
else
{
    Write-Output "Operation: $($data.operationName); Status:  $($data.status)";
}