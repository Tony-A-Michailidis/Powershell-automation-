param
(
    [Parameter (Mandatory = $false)]
    [object] $WebhookData
)

$Connection = Get-AutomationConnection -Name "AzureRunAsConnection"
$AzureProfile = Connect-AzAccount `
    -Tenant $Connection.TenantId `
    -CertificateThumbprint $Connection.CertificateThumbprint `
    -ApplicationId $Connection.ApplicationId `
    -ServicePrincipal
$AzureProfile.Context.Subscription

# FortimanagerEventLogForwarder
# Kevin Dutton 
# January 30, 2020
# Listens for data from Fortimanager Event Handlers
# formats and forwards the data to a Teams Channel.

function postToTeams()
{
    Write-Output "Post to teams."
    #Post to teams.
	$alertQueue = Get-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertQueue"
	$alertQueue = $alertQueue.Value
	
	if($alertQueue)
	{
		try
		{
			$uri = Get-AutomationVariable -Name 'TeamsURI'
			#$uri = Get-AutomationVariable -Name 'TestURI'
            
            $sections = $alertQueue | ConvertFrom-Json

            $payload1 =  @{
			    "@context" = "https://schema.org/extensions";
                "@type" = "MessageCard";
                "title" = "Firewall - Alerts";
                "themeColor" = "6666FF";
                "text" = "Summary";
                "sections" = @()
			}

            foreach($section in $sections)
            {
                $payload1.sections += $section
            }
			
			$json1 = ConvertTo-Json $payload1 -Depth 32

			Invoke-RestMethod -uri $uri -Method Post -body $json1 -ContentType 'Application/Json'
			
			Set-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertQueue" -Value "[]" -Encrypted $false;
            Set-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertCount" -Value 0 -Encrypted $false;
		}
		Catch
		{
			$ErrorMessage = $_.Exception.Message
			$FailedItem = $_.Exception.ItemName
			Write-Error "We failed to read $FailedItem. The error message was $ErrorMessage"
			Break
		}
	}
}

if ($WebhookData) {
    #Logic to convert when running from the test pane.
    if(-Not $WebhookData.RequestBody)
    {
        $WebhookData = $WebhookData | ConvertFrom-Json;
    }

    $requestBody = $WebhookData.RequestBody | ConvertFrom-Json;

    $section = @{};

    foreach($data in $requestBody.fortianalyzer_notification.data)
    {
        $pattern = ' date=(.*?) ';
        $date = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' time=(.*?) ';
        $time = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' level="(.*?)" ';
        $level = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' crlevel="(.*?)" ';
        $crlevel = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' subtype="(.*?)" ';
        $subtype = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' devname=(.*?) ';
        $devname = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' srcip=(.*?) ';
        $srcip = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' dstip=(.*?) ';
        $dstip = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' srcport=(.*?) ';
        $srcport = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' dstport=(.*?) ';
        $dstport = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' srcintf="(.*?)" ';
        $srcintf = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' dstintf="(.*?)" ';
        $dstintf = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' srcintfrole="(.*?)" ';
        $srcintfrole = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' dstintfrole="(.*?)" ';
        $dstintfrole = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' action="(.*?)" ';
        $action = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' attack="(.*?)" ';
        $attack = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' msg="(.*?)" ';
        $msg = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' direction="(.*?)" ';
        $direction = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' service="(.*?)" ';
        $service = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' hostname="(.*?)" ';
        $hostname = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $pattern = ' url="(.*?)" ';
        $url = [regex]::match($data.'log-detail', $pattern).Groups[1].Value;

        $section = @{
            "activityTitle" =  $date + " " + $time;
            "activitySubtitle" = $level + " - " + $data.severity;
            "facts" = @(
                @{
                    "name" = "Src";
                    "value" = $srcip + "; **Port**: " + $srcport + "; **Interface**: " + $srcintf + " - " + $srcintfrole
                },
                @{
                    "name" = "Dst";
                    "value" = $dstip + "; **Port**: " + $dstport + "; **Interface**: " + $dstintf + " - " + $dstintfrole
                },
                @{
                    "name" = "Direction";
                    "value" = $direction
                },
                @{
                    "name" = "Action";
                    "value" =  $action
                },
                @{
                    "name" = "Url";
                    "value" =  $service + " - " + $hostname + " - " + $url
                },
                @{
                    "name" = "Msg";
                    "value" =  $msg
                }
            )
        }
        if(![string]::IsNullOrEmpty($attack)) {
            $section.facts += @{
                "name" = "Attack";
                "value" = $attack;
            }
        }
    }
	
    if($action -ne "dropped") 
	{
        if($url -Match "ubuntu")
        {
            Write-Output "Ignore."
        }
        else
        {
            #Priority alert, post to teams now.
            try
            {
                $uri = Get-AutomationVariable -Name 'TeamsURI'
                #$uri = Get-AutomationVariable -Name 'TestURI'
                
                $payload1 =  @{
                    "@context" = "https://schema.org/extensions";
                    "@type" = "MessageCard";
                    "title" = "Firewall - Alerts";
                    "themeColor" = "6666FF";
                    "text" = "Testing which things we report right away vs bulk";
                    "sections" = @()
                }

                $payload1.sections += $section;

                $json1 = ConvertTo-Json $payload1 -Depth 32
                
                Invoke-RestMethod -uri $uri -Method Post -body $json1 -ContentType 'Application/Json'
            }
            Catch
            {
                $ErrorMessage = $_.Exception.Message
                $FailedItem = $_.Exception.ItemName
                Write-Error "We failed to read $FailedItem. The error message was $ErrorMessage"
                Break
            }
        }
	}
	else
	{
		#Add alert to queue.
		$alertQueue = Get-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertQueue"
		$alertQueue = $alertQueue.Value
		if($alertQueue -eq $null)
		{
			$alertQueue = "[]";
		}

        $sections = $alertQueue | ConvertFrom-Json

		$sections += $section;

        $alertQueue = ConvertTo-Json -InputObject $sections -Depth 32

		Set-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertQueue" -Value $alertQueue -Encrypted $false;

        #Update alert counter.
        $alertCount = Get-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertCount"
		$alertCount = $alertCount.Value + 1;
        if($alertCount -gt 9)
        {
            postToTeams;
        }
        else
        { 
            Set-AzAutomationVariable -ResourceGroupName "MGMT-PROD-RG" -AutomationAccountName "Mgmt-Prod-AzAuto" -Name "FortigateAlertCount" -Value $alertCount -Encrypted $false;
        }
	}
}
else
{
	postToTeams;
}