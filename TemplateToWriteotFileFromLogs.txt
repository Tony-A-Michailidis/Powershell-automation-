<#
    .DESCRIPTION
    Template/example to get stuff from the logs and write to file, change query and whatever in quotes needs changing...
    I kep the key in the vault instead of getting it directly from the storage account, reason: sometimes we may not be able to 
    control access to the keys directly from the storage account and the storage account keys in the storage account have no expiry date
    but the vault secrets have the option to add that so we do add expiry dates there. 
    
    .PARAMETER none
   
    .NOTES
        AUTHOR: Tony Michailidis
        LAST EDIT: 28 Feb 2020
        EDITOR: Tony Mchailidis
#>

function loginAzure 
{
    $connectionName = "AzureRunAsConnection"
    try
        {
            $servicePrincipalConnection=Get-AutomationConnection -Name $connectionName         
            "Logging in to Azure..."
            $azureaccount = Add-AzureRmAccount `
            -ServicePrincipal `
            -TenantId $servicePrincipalConnection.TenantId `
            -ApplicationId $servicePrincipalConnection.ApplicationId `
            -CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint 
        }
    catch 
        {
            if (!$servicePrincipalConnection)
                {
                    $ErrorMessage = "Connection $connectionName not found."
                    throw $ErrorMessage
                } 
            else
                {
                    Write-Error -Message $_.Exception  
                    throw $_.Exception
                }
       }
}

function writeToFile ($filecontents)
{ 
    # will fix parameters to pass all these strings later... 
    try
        {
            # get a new unique GUID for the file name plus dot csv for easy excel work after
            $guid = New-Guid
            $guidString =$guid.ToString()
            $LogFull = "$guidString.csv" 

            # get the key stored as a secret in the vault and send the file to the storage container 
            $LogItem = New-Item -ItemType File -Name $LogFull
            $filecontents | Out-File -FilePath $LogFull -Append
            $acctKey =  (Get-AzureKeyVaultSecret -vaultName "mgmt-valut" -name "runbookstoragekey").SecretValueText
            # "Key: " + $acctKey #debug
            $storageContext = New-AzureStorageContext -StorageAccountName "cloudmgmtprod" -StorageAccountKey  $acctKey
            # "Storage context: " + $storageContext #debug
            Set-AzureStorageBlobContent -File $LogFull -Container "runbookoutputs" -BlobType "Block" -Context $storageContext -Verbose
        }
    Catch
        {
            $ErrorMessage = $_.Exception.Message
            $FailedItem = $_.Exception.ItemName
            Write-Error "We failed to read $FailedItem. The error message was $ErrorMessage"
            Break
        }   
}

function Get-ParsedResult 
{
    param ( [Parameter(Mandatory=$true)] [System.Object] $Results )
    $b = ""
    foreach ($row in $Results.'<>3__rows') 
    {
        $b += $row.Computer + ", " + $row.DisplayName #xample if you don't want tne entire row
    }
    Return ($b)
}
  
$Conn = Get-AutomationConnection -Name 'AnalyticsConnection'
$null1 = Add-AzureRMAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationID $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint 

$queryResults = $null
$queryResults = Invoke-AzureRmOperationalInsightsQuery -WorkspaceId "82b8783b-c1a7-48d1-9b6e-43941b0191fa" -Query 'VMProcess' -Timespan (New-TimeSpan -Hours 1) 

if ($queryResults.results -ne $null) 
{

    # to converto to csv... change the comma to whatever you need to change it to

    # $outtt = Get-ParsedResult ($queryResults.results)
    # $csvstring = ConvertTo-Csv -InputObject $outtt -Delimiter "," -NoTypeInformation
    
    $csvstring = $queryResults.results
    writeToFile ($csvstring)

}


